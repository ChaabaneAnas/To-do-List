"use strict";(self.webpackChunkto_do_list=self.webpackChunkto_do_list||[]).push([[179],{426:(n,e,t)=>{t.d(e,{Z:()=>u});var r=t(537),a=t.n(r),o=t(645),s=t.n(o),i=t(667),c=t.n(i),A=new URL(t(198),t.b),l=s()(a());l.push([n.id,"@import url(https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.3/font/bootstrap-icons.css);"]);var d=c()(A);l.push([n.id,":root {\n  --primary: #007bff;\n  --secondary: #006db5;\n}\n\n.rm-decoration {\n  list-style: none;\n  text-decoration: none;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("+d+') no-repeat center center / cover fixed content-box;\n  text-align: center;\n  height: 100vh;\n  width: 100%;\n}\n\nform {\n  border-radius: 5px;\n  padding: 1.9rem;\n  background-color: white;\n  text-align: left;\n  max-width: 60%;\n}\n\n.header {\n  margin: 0;\n  padding: 1.5rem;\n  background-color: var(--secondary);\n  color: white;\n}\n\n.addTask {\n  gap: 1rem;\n  margin-top: 1rem;\n  padding: 0 .6rem;\n}\n\n.input {\n  width: 100%;\n}\n\nul {\n  padding-left: 0;\n  margin-bottom: 1.1rem;\n}\n\ninput {\n  border: none;\n}\n\nli,\ninput {\n  padding: 6px;\n  display: flex;\n}\n\n\n\nli {\n  justify-content: space-between;\n}\n\n.bi {\n  cursor: pointer;\n}\n\nli input:checked~.edit {\n  text-decoration: line-through;\n  opacity: 0.5;\n}\n\n.edit {\n  width: 100%;\n}\n\n.ClearC {\n  padding: 4%;\n}\n\na {\n  color: var(--secondary);\n}\n\n.plus-button {\n  width: 40px;\n  height: 40px;\n  background-color: #0077cc;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  position: relative;\n}\n\n.plus-button:before,\n.plus-button:after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 16px;\n  height: 2px;\n  background-color: #fff;\n  transform: translate(-50%, -50%);\n}\n\n.plus-button:before {\n  transform: translate(-50%, -50%) rotate(90deg);\n}\n\n.plus-button:hover:before,\n.plus-button:hover:after {\n  background-color: #eee;\n}\n\n@media screen and (max-width: 768px) {\n  from {\n    width: 100%;\n  }\n\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,oBAAoB;AACtB;;AAEA;EACE,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qGAA2F;EAC3F,kBAAkB;EAClB,aAAa;EACb,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,uBAAuB;EACvB,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,SAAS;EACT,eAAe;EACf,kCAAkC;EAClC,YAAY;AACd;;AAEA;EACE,SAAS;EACT,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;EACf,qBAAqB;AACvB;;AAEA;EACE,YAAY;AACd;;AAEA;;EAEE,YAAY;EACZ,aAAa;AACf;;;;AAIA;EACE,8BAA8B;AAChC;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,6BAA6B;EAC7B,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,yBAAyB;EACzB,YAAY;EACZ,aAAa;EACb,eAAe;EACf,kBAAkB;AACpB;;AAEA;;EAEE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,WAAW;EACX,sBAAsB;EACtB,gCAAgC;AAClC;;AAEA;EACE,8CAA8C;AAChD;;AAEA;;EAEE,sBAAsB;AACxB;;AAEA;EACE;IACE,WAAW;EACb;;AAEF",sourcesContent:['@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.3/font/bootstrap-icons.css");\n\n:root {\n  --primary: #007bff;\n  --secondary: #006db5;\n}\n\n.rm-decoration {\n  list-style: none;\n  text-decoration: none;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  background: url("assests/background.jpg") no-repeat center center / cover fixed content-box;\n  text-align: center;\n  height: 100vh;\n  width: 100%;\n}\n\nform {\n  border-radius: 5px;\n  padding: 1.9rem;\n  background-color: white;\n  text-align: left;\n  max-width: 60%;\n}\n\n.header {\n  margin: 0;\n  padding: 1.5rem;\n  background-color: var(--secondary);\n  color: white;\n}\n\n.addTask {\n  gap: 1rem;\n  margin-top: 1rem;\n  padding: 0 .6rem;\n}\n\n.input {\n  width: 100%;\n}\n\nul {\n  padding-left: 0;\n  margin-bottom: 1.1rem;\n}\n\ninput {\n  border: none;\n}\n\nli,\ninput {\n  padding: 6px;\n  display: flex;\n}\n\n\n\nli {\n  justify-content: space-between;\n}\n\n.bi {\n  cursor: pointer;\n}\n\nli input:checked~.edit {\n  text-decoration: line-through;\n  opacity: 0.5;\n}\n\n.edit {\n  width: 100%;\n}\n\n.ClearC {\n  padding: 4%;\n}\n\na {\n  color: var(--secondary);\n}\n\n.plus-button {\n  width: 40px;\n  height: 40px;\n  background-color: #0077cc;\n  border: none;\n  outline: none;\n  cursor: pointer;\n  position: relative;\n}\n\n.plus-button:before,\n.plus-button:after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 16px;\n  height: 2px;\n  background-color: #fff;\n  transform: translate(-50%, -50%);\n}\n\n.plus-button:before {\n  transform: translate(-50%, -50%) rotate(90deg);\n}\n\n.plus-button:hover:before,\n.plus-button:hover:after {\n  background-color: #eee;\n}\n\n@media screen and (max-width: 768px) {\n  from {\n    width: 100%;\n  }\n\n}'],sourceRoot:""}]);const u=l},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),s=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},s=[],i=0;i<n.length;i++){var c=n[i],A=r.base?c[0]+r.base:c[0],l=o[A]||0,d="".concat(A," ").concat(l);o[A]=l+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=a(p,r);r.byIndex=i,e.splice(i,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var s=0;s<o.length;s++){var i=t(o[s]);e[i].references--}for(var c=r(n,a),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},553:(n,e,t)=>{class r{static getTasks=()=>{let n;return n=null===localStorage.getItem("Tasks")?[]:JSON.parse(localStorage.getItem("Tasks")),n};static setTask=n=>{const e=this.getTasks();e.push(n),localStorage.setItem("Tasks",JSON.stringify(e))};static deleteTask=n=>{let e=this.getTasks();e=e.filter((e=>e.index!==n)),localStorage.setItem("Tasks",JSON.stringify(e))}}const a=document.querySelector(".tdList");class o{static updateD=()=>{const n=document.querySelectorAll("li");r.getTasks().map(((e,t)=>n[t].setAttribute("data-index",e.index)))};static addTask=n=>{const e=document.createElement("li");e.setAttribute("data-index",n.index),e.innerHTML=` <div class = "flex"><input class ="box" type="checkbox" ${n.completed?"checked":""}>\n    <span class="checkbox"></span><input type="text" class = "edit" value="${n.Description}">\n     </div><i class="bi bi-trash"></i>`,a.appendChild(e)};static DisplayTasks=()=>{a.innerHTML="",r.getTasks().map((n=>this.addTask(n)))}}class s{static UpdateI=()=>{const n=r.getTasks();n.forEach(((e,t)=>{n[t].index=t+1})),localStorage.setItem("Tasks",JSON.stringify(n))};static clear=()=>{let n=r.getTasks();n=n.filter((n=>!n.completed)),localStorage.setItem("Tasks",JSON.stringify(n))};static updateStatue=n=>{let e=r.getTasks();e=e.map(((t,r)=>{n===r&&(t.completed=!t.completed,localStorage.setItem("Tasks",JSON.stringify(e)))}))};static updateValue=(n,e)=>{const t=r.getTasks();t[n].Description=e,localStorage.setItem("Tasks",JSON.stringify(t))}}var i=t(379),c=t.n(i),A=t(795),l=t.n(A),d=t(569),u=t.n(d),p=t(565),f=t.n(p),E=t(216),g=t.n(E),m=t(589),h=t.n(m),b=t(426),C={};C.styleTagTransform=h(),C.setAttributes=f(),C.insert=u().bind(null,"head"),C.domAPI=l(),C.insertStyleElement=g(),c()(b.Z,C),b.Z&&b.Z.locals&&b.Z.locals;class v{static counter=0;constructor(n,e){this.Description=n,this.completed=!1,this.index=e}}document.addEventListener("DOMContentLoaded",o.DisplayTasks(),s.UpdateI()),document.querySelector("form").addEventListener("submit",(n=>{n.preventDefault();const e=r.getTasks(),t=document.querySelector("input").value,a=new v(t,e.length+1);r.setTask(a),o.DisplayTasks(),document.querySelector("input").value=""}));const x=document.querySelector(".tdList");x.addEventListener("click",(n=>{n.target.classList.contains("bi-trash")&&(r.deleteTask(Number(n.target.parentElement.dataset.index)),s.UpdateI(),o.updateD(),o.DisplayTasks())})),x.addEventListener("change",(n=>{if(n.target.classList.contains("box")){const e=Number(n.target.parentElement.parentElement.dataset.index)-1;s.updateStatue(e)}})),document.querySelector("a").addEventListener("click",(()=>{s.clear(),o.DisplayTasks()})),x.addEventListener("keypress",(n=>{if("Enter"===n.key&&n.target.classList.contains("edit")){const e=n.target.value,t=Number(n.target.parentElement.parentElement.dataset.index)-1;s.updateValue(t,e)}}))},198:(n,e,t)=>{n.exports=t.p+"d3424a69f6a4d580ee92.jpg"}},n=>{n(n.s=553)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,