"use strict";(self.webpackChunkto_do_list=self.webpackChunkto_do_list||[]).push([[179],{426:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(537),s=t.n(a),r=t(645),o=t.n(r)()(s());o.push([e.id,"@import url(https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.3/font/bootstrap-icons.css);"]),o.push([e.id,"body {\n  text-align: center;\n  background-color: rgb(218, 214, 214);\n  height: 100vh;\n}\n\n.flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.rm-decoration {\n  list-style: none;\n  text-decoration: none;\n}\n\nform {\n  padding: 30px;\n  background-color: white;\n  width: 40%;\n  text-align: left;\n}\n\nul {\n  padding-left: 0;\n  margin-bottom: 17px;\n}\n\ninput {\n  border: none;\n  width: auto;\n}\n\nli,\ninput {\n  padding: 6px;\n  border-bottom: 1px solid rgb(211, 210, 210);\n  display: flex;\n}\n\n.flex {\n  display: flex;\n}\n\nli {\n  display: flex;\n  justify-content: space-between;\n}\n\n.bi {\n  cursor: pointer;\n}\n\n.input { width: 100%; }\n\nli input:checked + label { text-decoration: line-through; }\n\n.ClearC {\n  padding: 4%;\n}\n\na {\n  color: black;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,kBAAkB;EAClB,oCAAoC;EACpC,aAAa;AACf;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;;EAEE,YAAY;EACZ,2CAA2C;EAC3C,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,eAAe;AACjB;;AAEA,SAAS,WAAW,EAAE;;AAEtB,2BAA2B,6BAA6B,EAAE;;AAE1D;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd",sourcesContent:['@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.3/font/bootstrap-icons.css");\n\nbody {\n  text-align: center;\n  background-color: rgb(218, 214, 214);\n  height: 100vh;\n}\n\n.flex-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.rm-decoration {\n  list-style: none;\n  text-decoration: none;\n}\n\nform {\n  padding: 30px;\n  background-color: white;\n  width: 40%;\n  text-align: left;\n}\n\nul {\n  padding-left: 0;\n  margin-bottom: 17px;\n}\n\ninput {\n  border: none;\n  width: auto;\n}\n\nli,\ninput {\n  padding: 6px;\n  border-bottom: 1px solid rgb(211, 210, 210);\n  display: flex;\n}\n\n.flex {\n  display: flex;\n}\n\nli {\n  display: flex;\n  justify-content: space-between;\n}\n\n.bi {\n  cursor: pointer;\n}\n\n.input { width: 100%; }\n\nli input:checked + label { text-decoration: line-through; }\n\n.ClearC {\n  padding: 4%;\n}\n\na {\n  color: black;\n}\n'],sourceRoot:""}]);const i=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,s,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);a&&o[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),s&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=s):d[4]="".concat(s)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(s," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var r={},o=[],i=0;i<e.length;i++){var c=e[i],l=a.base?c[0]+a.base:c[0],d=r[l]||0,u="".concat(l," ").concat(d);r[l]=d+1;var A=t(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var f=s(p,a);a.byIndex=i,n.splice(i,0,{identifier:u,updater:f,references:1})}o.push(u)}return o}function s(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,s){var r=a(e=e||[],s=s||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var i=t(r[o]);n[i].references--}for(var c=a(e,s),l=0;l<r.length;l++){var d=t(r[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}r=c}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var s=void 0!==t.layer;s&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,s&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},632:(e,n,t)=>{class a{static getTasks=()=>{let e;return e=null===localStorage.getItem("Tasks")?[]:JSON.parse(localStorage.getItem("Tasks")),e};static setTask=e=>{const n=this.getTasks();n.push(e),localStorage.setItem("Tasks",JSON.stringify(n))};static deleteTask=e=>{const n=this.getTasks();n.forEach(((t,a)=>{e===t.index&&n.splice(a,1)})),localStorage.setItem("Tasks",JSON.stringify(n))}}const s=document.querySelector(".tdList");class r{static updateD=()=>{a.getTasks().forEach(((e,n)=>{document.querySelectorAll("li")[n].setAttribute("data-index",e.index)}))};static addTask=e=>{const n=document.createElement("li");n.setAttribute("data-index",e.index),n.innerHTML=` <div class = "flex"><input id="checkbs" type="checkbox">\n    <span class="checkbox"></span><input type="text" class = "edit" value="${e.Description}">\n     </div><i class="bi bi-trash"></i>`,s.appendChild(n)};static DisplayTasks=()=>{s.innerHTML="",a.getTasks().forEach((e=>{this.addTask(e)}))}}class o{static UpdateI=()=>{const e=a.getTasks();e.forEach(((n,t)=>{e[t].index=t+1})),localStorage.setItem("Tasks",JSON.stringify(e))}}var i=t(379),c=t.n(i),l=t(795),d=t.n(l),u=t(569),A=t.n(u),p=t(565),f=t.n(p),m=t(216),g=t.n(m),h=t(589),E=t.n(h),b=t(426),y={};y.styleTagTransform=E(),y.setAttributes=f(),y.insert=A().bind(null,"head"),y.domAPI=d(),y.insertStyleElement=g(),c()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;class v{constructor(e,n){this.Description=e,this.completed=!1,this.index=n}}document.addEventListener("DOMContentLoaded",r.DisplayTasks(),o.UpdateI()),document.querySelector("form").addEventListener("submit",(e=>{e.preventDefault();const n=a.getTasks(),t=document.querySelector("input").value,s=new v(t,n.length+1);a.setTask(s),r.DisplayTasks(),document.querySelector("input").value=""}));const C=document.querySelector(".tdList");C.addEventListener("click",(e=>{e.target.classList.contains("bi-trash")&&(a.deleteTask(Number(e.target.parentElement.dataset.index)),o.UpdateI(),r.updateD(),r.DisplayTasks())})),document.querySelectorAll("#checkbs").forEach(((e,n)=>{e.addEventListener("change",(()=>{const e=a.getTasks(),t=document.querySelectorAll("#checkbs");e[n].completed=t[n].checked,localStorage.setItem("Tasks",JSON.stringify(e))}))})),document.querySelector("a").addEventListener("click",(()=>{let e=a.getTasks();e=e.filter((e=>!e.completed)),localStorage.setItem("Tasks",JSON.stringify(e)),r.DisplayTasks()})),C.addEventListener("keypress",(e=>{if("Enter"===e.key){const n=a.getTasks();if(e.target.classList.contains("edit")){const{value:t}=e.target;n[Number(e.target.parentElement.parentElement.dataset.index)-1].Description=t}localStorage.setItem("Tasks",JSON.stringify(n))}}))}},e=>{e(e.s=632)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,